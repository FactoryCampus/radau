swagger: "2.0"

info:
  title: radau - WiFi Login Service
  description: A micro-service backend used to generate and verify tokens for WPA Enterprise setups
  version: "0.1.0"

consumes:
  - application/json; charset=utf-8
produces:
  - application/json; charset=utf-8

paths:
  /users:
    get:
      summary: Get all users
      parameters:
        - in: query
          name: limit
          description: Limits number of returned users by this value
          type: number
        - in: query
          name: offset
          description: Sets the offset for a limited number of users
          type: number
      responses:
        200:
          description: All users (optionally a limited amount)
          schema:
            type: object
            properties:
              users:
                description: The users in the database
                type: array
                items:
                  $ref: "#/definitions/User"
              userCount:
                description: The number of returned users
                type: number

  /user:
    post:
      summary: Create a new user
      parameters:
        - in: body
          name: body
          description: User object to be created
          required: true
          schema:
            $ref: "#/definitions/UserCreation"
      responses:
        200:
          description: User which was created
          schema:
            $ref: "#/definitions/User"
        422:
          description: User already exists

  /user/{username}:
    get:
      summary: Get userdata
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: The username to query
          x-example: maggy
      responses:
        200:
          description: User object
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
    put:
      summary: Change userdata
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: The username to query
          x-example: maggy
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        200:
          description: User has been changed
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found by username
    delete:
      summary: Delete user
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: The username of the user to delete
          x-example: maggy
      responses:
        204:
          description: User has been deleted
        404:
          description: User not found

  /token/{username}:
    post:
      summary: Create a new token for a user
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: The username to create the token for
          x-example: maggy
      responses:
        200:
          description: Token created
          schema:
            $ref: '#/definitions/TokenOnly'
        404:
          description: User not found
    delete:
      summary: Delete a user's token. This will result in disabling login for that user
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: The username to delete the token for
          x-example: maggy
      responses:
        204:
          description: Token deleted
        404:
          description: User not found

  /radius/{username}:
    get:
      summary: Get info for radius auth
      security:
        - ApiKeyRadius: []
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: The username to query user info for
          x-example: maggy
      responses:
        200:
          description: Radius attributes
          schema:
            $ref: '#/definitions/RadiusInfo'
        401:
          description: No token available
        404:
          description: User not found

securityDefinitions:
  Management:
    description: API key used for managing users and tokens
    type: apiKey
    name: Authorization
    in: header
  radius:
    description: Authorization for radius rest module to fetch user info. Username "Radius"
    type: basic

definitions:
  User:
    type: object
    required: ['username']
    properties:
      username:
        type: string
        description: Usually an email address
      extraProperties:
        type: object
        description: Extra radius properties
        default: {}
  UserCreation:
    type: object
    required: ['username']
    properties:
      username:
        type: string
        description: The user identification to use
        example: maggy
      extraProperties:
        type: object
        description: Extra radius properties to assign to the new user
        example: {}
    example:
      username: maggy
  UserUpdate:
    type: object
    properties:
      username:
        type: string
        description: Updated user identification to assign to the user
        example: maggy
      extraProperties:
        type: object
        description: Extra radius properties to update. *Will override all existing properties!*
        example: {}
  TokenOnly:
    type: object
    required: ['token']
    properties:
      token:
        description: The token of a certain user
        type: string
  RadiusInfo:
    type: object
    properties:
      "control:Cleartext-Password":
        description: The user token prepared for radius
        type: string
    additionalProperties:
      description: Extra Radius properties assigned to the user
      type: string
